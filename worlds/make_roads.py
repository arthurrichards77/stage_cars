from math import sin, cos, pi

tile_size = 20.0
road_width = 6.0

print """# roads library
# generated by "make_roads.py"

# basic tile - green square

define road_tile model
("""
print "  size [%f %f 0.01]" % (tile_size,tile_size)
print """  color "green"
  obstacle_return 0
)

# basic road material - grey

define road model
(
  color "gray"
  obstacle_return 0
)

# tile with straight road only

define road_straight road_tile
(
  road
  ("""
print "    size [%f %f 0.01]" % (tile_size,road_width)
print """  )
)

# tile with 90deg bend

define road_bend road_tile
(
  road
  ("""
bend_size = 0.5*tile_size + 0.5*road_width
print "    size [%f %f 0.01]" % (bend_size,bend_size)
bend_offset = 0.5*(tile_size - bend_size)
print "    pose [%f %f 0 270]" % (-bend_offset,bend_offset)
num_segments = 10
inner_ratio = (tile_size - road_width)/(tile_size + road_width)
for ii in range(num_segments):
  th0 = 0.5*pi*ii/num_segments
  th1 = 0.5*pi*(ii+1)/num_segments
  print """    block
    (
      points 4"""
  print "      point[0] [%f %f]" % (cos(th0),sin(th0))
  print "      point[1] [%f %f]" % (inner_ratio*cos(th0),inner_ratio*sin(th0))
  print "      point[2] [%f %f]" % (inner_ratio*cos(th1),inner_ratio*sin(th1))
  print "      point[3] [%f %f]" % (cos(th1),sin(th1))
  print """      z [0 1.0]
    )"""
print """  )
)

# this one does a T junction

define road_turnout road_straight
(
  # side road
  road
  ("""
kerb_radius = 3
t_length = 0.5*(tile_size - road_width) - kerb_radius
print "    size [%f %f 0.01]" % (road_width, t_length)
print "    pose [0 %f 0 0]" % (0.5*road_width + 0.5*t_length + kerb_radius)
print """  )
  road
  ("""
print "    size [%f %f 0.01]" % (road_width+2*kerb_radius, kerb_radius)
print "    pose [0 %f 0 0]" % (0.5*road_width + 0.5*kerb_radius)
num_segments = 10
kerb_ratio = kerb_radius / (road_width+2*kerb_radius)
for ii in range(num_segments):
  th0 = 0.5*pi*ii/num_segments
  th1 = 0.5*pi*(ii+1)/num_segments
  ry0 = kerb_ratio*sin(th0)
  ry1 = kerb_ratio*sin(th1)
  rx0 = kerb_ratio*cos(th0)
  rx1 = kerb_ratio*cos(th1)
  print """    block
  (
    points 4"""
  print "      point[0] [%f %f]" % (rx0,1.0-ry0)
  print "      point[1] [%f %f]" % (1.0-rx0,1.0-ry0)
  print "      point[2] [%f %f]" % (1.0-rx1,1.0-ry1)
  print "      point[3] [%f %f]" % (rx1,1.0-ry1)
  print """      z [0 1.0]
  )"""
print """  )
)

"""
